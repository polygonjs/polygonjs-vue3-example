import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { AudioListenerObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/AudioListener";
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
import { HemisphereLightObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/HemisphereLight";
import { PerspectiveCameraObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/PerspectiveCamera";
import { PositionalAudioObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/PositionalAudio";
import { SpotLightObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/SpotLight";
// sop
import { ActorSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Actor";
import { AudioNotesSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/AudioNotes";
import { BoxSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Box";
import { CopySopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Copy";
import { EventsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/EventsNetwork";
import { MaterialSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Material";
import { MaterialsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/MaterialsNetwork";
import { TransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Transform";
// actor
import { ConstantActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/Constant";
import { FloatToVec3ActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/FloatToVec3";
import { GetObjectAttributeActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/GetObjectAttribute";
import { OnObjectHoverActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/OnObjectHover";
import { OnTickActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/OnTick";
import { PlayInstrumentNoteActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/PlayInstrumentNote";
import { SetObjectMaterialColorActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/SetObjectMaterialColor";
import { SetObjectRotationActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/SetObjectRotation";
import { TriggerTwoWaySwitchActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/TriggerTwoWaySwitch";
import { TwoWaySwitchActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/TwoWaySwitch";
// mat
import { MeshStandardMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandard";
// event
import { CameraOrbitControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/CameraOrbitControls";
// audio
import { AMSynthAudioNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/audio/AMSynth";
import { EnvelopeAudioNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/audio/Envelope";
import { NullAudioNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/audio/Null";
import { PlayInstrumentAudioNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/audio/PlayInstrument";
import { SamplerAudioNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/audio/Sampler";

export class PolySceneWithNodeMap_scene_03 extends PolyScene {
  node(path: "/hemisphereLight1"): HemisphereLightObjNode;
  node(path: "/spotLight1"): SpotLightObjNode;
  node(path: "/audioListener1"): AudioListenerObjNode;
  node(path: "/geo1"): GeoObjNode;
  node(path: "/geo1/box1"): BoxSopNode;
  node(path: "/geo1/transform1"): TransformSopNode;
  node(path: "/geo1/copy1"): CopySopNode;
  node(path: "/geo1/audioNotes1"): AudioNotesSopNode;
  node(path: "/geo1/material1"): MaterialSopNode;
  node(path: "/geo1/actor1"): ActorSopNode;
  node(path: "/geo1/actor1/onObjectHover1"): OnObjectHoverActorNode;
  node(path: "/geo1/actor1/playInstrumentNote1"): PlayInstrumentNoteActorNode;
  node(path: "/geo1/actor1/getObjectAttribute1"): GetObjectAttributeActorNode;
  node(path: "/geo1/actor1/triggerTwoWaySwitch1"): TriggerTwoWaySwitchActorNode;
  node(path: "/geo1/actor1/twoWaySwitch1"): TwoWaySwitchActorNode;
  node(path: "/geo1/actor1/constant1"): ConstantActorNode;
  node(path: "/geo1/actor1/constant2"): ConstantActorNode;
  node(path: "/geo1/actor1/onTick1"): OnTickActorNode;
  node(
    path: "/geo1/actor1/setObjectMaterialColor1"
  ): SetObjectMaterialColorActorNode;
  node(path: "/geo1/actor1/twoWaySwitch2"): TwoWaySwitchActorNode;
  node(path: "/geo1/actor1/setObjectRotation1"): SetObjectRotationActorNode;
  node(path: "/geo1/actor1/twoWaySwitch3"): TwoWaySwitchActorNode;
  node(path: "/geo1/actor1/floatToVec3_1"): FloatToVec3ActorNode;
  node(path: "/geo1/actor1/twoWaySwitch4"): TwoWaySwitchActorNode;
  node(path: "/geo1/MAT"): MaterialsNetworkSopNode;
  node(path: "/geo1/MAT/meshStandard1"): MeshStandardMatNode;
  node(path: "/perspectiveCamera1"): PerspectiveCameraObjNode;
  node(path: "/perspectiveCamera1/events1"): EventsNetworkSopNode;
  node(
    path: "/perspectiveCamera1/events1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/positionalAudio1"): PositionalAudioObjNode;
  node(path: "/positionalAudio1/envelope1"): EnvelopeAudioNode;
  node(path: "/positionalAudio1/AMSynth1"): AMSynthAudioNode;
  node(path: "/positionalAudio1/playInstrument1"): PlayInstrumentAudioNode;
  node(path: "/positionalAudio1/OUT"): NullAudioNode;
  node(path: "/positionalAudio1/sampler1"): SamplerAudioNode;
  node(path: "/positionalAudio1/envelope2"): EnvelopeAudioNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_scene_03 {
  "hemisphereLight1--skyColor"?: ParamValueSerializedTypeMap["color"];
  "hemisphereLight1--skyColor-skyColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColor-skyColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColor-skyColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor"?: ParamValueSerializedTypeMap["color"];
  "hemisphereLight1--groundColor-groundColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor-groundColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor-groundColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position"?: ParamValueSerializedTypeMap["vector3"];
  "hemisphereLight1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positionx"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positiony"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positionz"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--name"?: ParamValueSerializedTypeMap["string"];
  "spotLight1--transform"?: ParamValueSerializedTypeMap["folder"];
  "spotLight1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "spotLight1--t"?: ParamValueSerializedTypeMap["vector3"];
  "spotLight1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--tx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--ty"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--tz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--r"?: ParamValueSerializedTypeMap["vector3"];
  "spotLight1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--rx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--ry"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--rz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--s"?: ParamValueSerializedTypeMap["vector3"];
  "spotLight1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--sx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--sy"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--sz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--scale"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "spotLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "spotLight1--color"?: ParamValueSerializedTypeMap["color"];
  "spotLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--angle"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--penumbra"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--decay"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--distance"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--helperSize"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--name"?: ParamValueSerializedTypeMap["string"];
  "spotLight1--shadow"?: ParamValueSerializedTypeMap["folder"];
  "spotLight1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--shadowAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--shadowUpdateOnNextRender"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--shadowRes"?: ParamValueSerializedTypeMap["vector2"];
  "spotLight1--shadowRes-shadowResx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowRes-shadowResy"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowResx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowResy"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowBias"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowNear"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowFar"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowRadius"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--volumetric"?: ParamValueSerializedTypeMap["folder"];
  "spotLight1--tvolumetric"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--volAttenuation"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--volAnglePower"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--transform"?: ParamValueSerializedTypeMap["folder"];
  "audioListener1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "audioListener1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "audioListener1--t"?: ParamValueSerializedTypeMap["vector3"];
  "audioListener1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--tx"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--ty"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--tz"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--r"?: ParamValueSerializedTypeMap["vector3"];
  "audioListener1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--rx"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--ry"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--rz"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--s"?: ParamValueSerializedTypeMap["vector3"];
  "audioListener1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--sx"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--sy"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--sz"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--scale"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "audioListener1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "audioListener1--audio"?: ParamValueSerializedTypeMap["folder"];
  "audioListener1--soundOn"?: ParamValueSerializedTypeMap["boolean"];
  "audioListener1--masterVolume"?: ParamValueSerializedTypeMap["float"];
  "audioListener1--listenerTransformAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--transform"?: ParamValueSerializedTypeMap["folder"];
  "geo1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "geo1--display"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-box1--size"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizes"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-box1--sizes-sizesx"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizes-sizesy"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizes-sizesz"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizesx"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizesy"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizesz"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--divisions"?: ParamValueSerializedTypeMap["integer"];
  "geo1-box1--center"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-box1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--centerx"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--centery"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--centerz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--count"?: ParamValueSerializedTypeMap["integer"];
  "geo1-copy1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-copy1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-copy1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-copy1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--transformOnly"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-copy1--transformMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-copy1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-copy1--copyAttributes"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-copy1--attributesToCopy"?: ParamValueSerializedTypeMap["string"];
  "geo1-copy1--useCopyExpr"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-audioNotes1--class"?: ParamValueSerializedTypeMap["integer"];
  "geo1-audioNotes1--name"?: ParamValueSerializedTypeMap["string"];
  "geo1-audioNotes1--toctave"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-audioNotes1--octaveName"?: ParamValueSerializedTypeMap["string"];
  "geo1-audioNotes1--startOctave"?: ParamValueSerializedTypeMap["integer"];
  "geo1-audioNotes1--endOctave"?: ParamValueSerializedTypeMap["integer"];
  "geo1-audioNotes1--outOfRangeBehavior"?: ParamValueSerializedTypeMap["integer"];
  "geo1-material1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-material1--applyToChildren"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "geo1-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "geo1-actor1--objectsMask"?: ParamValueSerializedTypeMap["string"];
  "geo1-actor1--useThisNode"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1--node"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-actor1-onObjectHover1--element"?: ParamValueSerializedTypeMap["integer"];
  "geo1-actor1-onObjectHover1--traverseChildren"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1-onObjectHover1--pointsThreshold"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-onObjectHover1--lineThreshold"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-playInstrumentNote1--node"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-actor1-playInstrumentNote1--note"?: ParamValueSerializedTypeMap["string"];
  "geo1-actor1-playInstrumentNote1--duration"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-getObjectAttribute1--attribName"?: ParamValueSerializedTypeMap["string"];
  "geo1-actor1-getObjectAttribute1--type"?: ParamValueSerializedTypeMap["integer"];
  "geo1-actor1-triggerTwoWaySwitch1--condition"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1-twoWaySwitch1--condition"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1-twoWaySwitch1--ifTrue"?: ParamValueSerializedTypeMap["color"];
  "geo1-actor1-twoWaySwitch1--ifTrue-ifTruer"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifTrue-ifTrueg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifTrue-ifTrueb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifTruer"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifTrueg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifTrueb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifFalse"?: ParamValueSerializedTypeMap["color"];
  "geo1-actor1-twoWaySwitch1--ifFalse-ifFalser"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifFalse-ifFalseg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifFalse-ifFalseb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifFalser"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifFalseg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch1--ifFalseb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--type"?: ParamValueSerializedTypeMap["integer"];
  "geo1-actor1-constant1--boolean"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1-constant1--color"?: ParamValueSerializedTypeMap["color"];
  "geo1-actor1-constant1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--float"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--integer"?: ParamValueSerializedTypeMap["integer"];
  "geo1-actor1-constant1--string"?: ParamValueSerializedTypeMap["string"];
  "geo1-actor1-constant1--vector2"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-actor1-constant1--vector2-vector2x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector2-vector2y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector2x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector2y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector3"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-actor1-constant1--vector3-vector3x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector3-vector3y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector3-vector3z"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector3x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector3y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector3z"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector4"?: ParamValueSerializedTypeMap["vector4"];
  "geo1-actor1-constant1--vector4-vector4x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector4-vector4y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector4-vector4z"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector4-vector4w"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector4x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector4y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector4z"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant1--vector4w"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--type"?: ParamValueSerializedTypeMap["integer"];
  "geo1-actor1-constant2--boolean"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1-constant2--color"?: ParamValueSerializedTypeMap["color"];
  "geo1-actor1-constant2--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--float"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--integer"?: ParamValueSerializedTypeMap["integer"];
  "geo1-actor1-constant2--string"?: ParamValueSerializedTypeMap["string"];
  "geo1-actor1-constant2--vector2"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-actor1-constant2--vector2-vector2x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector2-vector2y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector2x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector2y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector3"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-actor1-constant2--vector3-vector3x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector3-vector3y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector3-vector3z"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector3x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector3y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector3z"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector4"?: ParamValueSerializedTypeMap["vector4"];
  "geo1-actor1-constant2--vector4-vector4x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector4-vector4y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector4-vector4z"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector4-vector4w"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector4x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector4y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector4z"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-constant2--vector4w"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectMaterialColor1--color"?: ParamValueSerializedTypeMap["color"];
  "geo1-actor1-setObjectMaterialColor1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectMaterialColor1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectMaterialColor1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectMaterialColor1--colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectMaterialColor1--colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectMaterialColor1--colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectMaterialColor1--lerp"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch2--condition"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1-twoWaySwitch2--ifTrue"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch2--ifFalse"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectRotation1--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-actor1-setObjectRotation1--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectRotation1--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectRotation1--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectRotation1--rotationx"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectRotation1--rotationy"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectRotation1--rotationz"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectRotation1--lerp"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-setObjectRotation1--updateMatrix"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1-twoWaySwitch3--condition"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1-twoWaySwitch3--ifTrue"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch3--ifFalse"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-floatToVec3_1--x"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-floatToVec3_1--y"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-floatToVec3_1--z"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch4--condition"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-actor1-twoWaySwitch4--ifTrue"?: ParamValueSerializedTypeMap["float"];
  "geo1-actor1-twoWaySwitch4--ifFalse"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--default"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandard1--color"?: ParamValueSerializedTypeMap["color"];
  "geo1-MAT-meshStandard1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useVertexColors"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--opacity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--textures"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandard1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--map"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissive"?: ParamValueSerializedTypeMap["color"];
  "geo1-MAT-meshStandard1--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissiver"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-MAT-meshStandard1--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--metalness"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--roughness"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandard1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--front"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--blending"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--wireframeLinecap"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--wireframeLinejoin"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--transform"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--t"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--scale"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--camera"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--controls"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--updateFromControlsMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--near"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--far"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--display"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--fov"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--frameMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--expectedAspectRatio"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--layer"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--render"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--setScene"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--scene"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--renderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setCSSRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--CSSRenderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--doPostProcess"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--postProcessNode"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1-events1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--enableKeys"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysPanSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysRotateSpeedVertical"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysRotateSpeedHorizontal"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--transform"?: ParamValueSerializedTypeMap["folder"];
  "positionalAudio1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "positionalAudio1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "positionalAudio1--t"?: ParamValueSerializedTypeMap["vector3"];
  "positionalAudio1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--tx"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--ty"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--tz"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--r"?: ParamValueSerializedTypeMap["vector3"];
  "positionalAudio1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--rx"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--ry"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--rz"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--s"?: ParamValueSerializedTypeMap["vector3"];
  "positionalAudio1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--sx"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--sy"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--sz"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--scale"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "positionalAudio1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "positionalAudio1--audio"?: ParamValueSerializedTypeMap["folder"];
  "positionalAudio1--audioNode"?: ParamValueSerializedTypeMap["node_path"];
  "positionalAudio1--refDistance"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--rolloffFactor"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--distanceModel"?: ParamValueSerializedTypeMap["integer"];
  "positionalAudio1--coneInnerAngle"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--coneOuterAngle"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--coneOuterGain"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1--listenerTransformAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "positionalAudio1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "positionalAudio1--helperSize"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1-envelope1--attack"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1-envelope1--decay"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1-envelope1--sustain"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1-envelope1--release"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1-playInstrument1--note"?: ParamValueSerializedTypeMap["string"];
  "positionalAudio1-playInstrument1--duration"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1-playInstrument1--showNotes"?: ParamValueSerializedTypeMap["boolean"];
  "positionalAudio1-playInstrument1--showKeys"?: ParamValueSerializedTypeMap["boolean"];
  "positionalAudio1-playInstrument1--startOctave"?: ParamValueSerializedTypeMap["integer"];
  "positionalAudio1-playInstrument1--endOctave"?: ParamValueSerializedTypeMap["integer"];
  "positionalAudio1-playInstrument1--updateNoteFromInstrument"?: ParamValueSerializedTypeMap["boolean"];
  "positionalAudio1-sampler1--urlsMap"?: ParamValueSerializedTypeMap["string"];
  "positionalAudio1-sampler1--baseUrl"?: ParamValueSerializedTypeMap["string"];
  "positionalAudio1-sampler1--extension"?: ParamValueSerializedTypeMap["string"];
  "positionalAudio1-envelope2--attack"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1-envelope2--decay"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1-envelope2--sustain"?: ParamValueSerializedTypeMap["float"];
  "positionalAudio1-envelope2--release"?: ParamValueSerializedTypeMap["float"];
}
