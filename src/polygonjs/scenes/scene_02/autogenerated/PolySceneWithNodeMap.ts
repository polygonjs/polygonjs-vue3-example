import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { CopNetworkObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/CopNetwork";
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
import { HemisphereLightObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/HemisphereLight";
import { PerspectiveCameraObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/PerspectiveCamera";
import { PointLightObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/PointLight";
import { PolarTransformObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/PolarTransform";
// sop
import { AttribDeleteSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/AttribDelete";
import { CircleSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Circle";
import { EventsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/EventsNetwork";
import { FileGLTFSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/FileGLTF";
import { FuseSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Fuse";
import { HierarchySopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Hierarchy";
import { InstanceSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Instance";
import { MaterialSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Material";
import { MaterialsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/MaterialsNetwork";
import { MergeSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Merge";
import { NullSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Null";
import { ObjectPropertiesSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/ObjectProperties";
import { PointSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Point";
import { ReflectorSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Reflector";
import { RoundedBoxSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/RoundedBox";
import { ScatterSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Scatter";
import { SphereSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Sphere";
import { TransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Transform";
// event
import { CameraOrbitControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/CameraOrbitControls";
// cop
import { EnvMapCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/EnvMap";
import { ImageEXRCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/ImageEXR";
// mat
import { MeshBasicMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshBasic";
import { MeshLambertBuilderMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshLambertBuilder";
import { MeshPhysicalBuilderMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshPhysicalBuilder";

export class PolySceneWithNodeMap_scene_02 extends PolyScene {
  node(path: "/polarTransform1"): PolarTransformObjNode;
  node(path: "/pointLight1"): PointLightObjNode;
  node(path: "/hemisphereLight1"): HemisphereLightObjNode;
  node(path: "/perspectiveCamera1"): PerspectiveCameraObjNode;
  node(path: "/perspectiveCamera1/events1"): EventsNetworkSopNode;
  node(
    path: "/perspectiveCamera1/events1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/floor"): GeoObjNode;
  node(path: "/floor/circle1"): CircleSopNode;
  node(path: "/floor/reflector1"): ReflectorSopNode;
  node(path: "/COP"): CopNetworkObjNode;
  node(path: "/COP/image1"): ImageEXRCopNode;
  node(path: "/COP/envMap1"): EnvMapCopNode;
  node(path: "/geo2"): GeoObjNode;
  node(path: "/geo2/sphere1"): SphereSopNode;
  node(path: "/geo2/material1"): MaterialSopNode;
  node(path: "/geo2/objectProperties1"): ObjectPropertiesSopNode;
  node(path: "/geo2/MAT"): MaterialsNetworkSopNode;
  node(path: "/geo2/MAT/meshBasic1"): MeshBasicMatNode;
  node(path: "/rhino"): GeoObjNode;
  node(path: "/rhino/material1"): MaterialSopNode;
  node(path: "/rhino/fileGLTF1"): FileGLTFSopNode;
  node(path: "/rhino/hierarchy1"): HierarchySopNode;
  node(path: "/rhino/scatter1"): ScatterSopNode;
  node(path: "/rhino/point1"): PointSopNode;
  node(path: "/rhino/fuse1"): FuseSopNode;
  node(path: "/rhino/instance1"): InstanceSopNode;
  node(path: "/rhino/attribDelete1"): AttribDeleteSopNode;
  node(path: "/rhino/roundedBox1"): RoundedBoxSopNode;
  node(path: "/rhino/transform1"): TransformSopNode;
  node(path: "/rhino/merge1"): MergeSopNode;
  node(path: "/rhino/OUT"): NullSopNode;
  node(path: "/rhino/MAT"): MaterialsNetworkSopNode;
  node(path: "/rhino/MAT/meshPhysicalBuilder1"): MeshPhysicalBuilderMatNode;
  node(
    path: "/rhino/MAT/meshLambertBuilder_INSTANCES"
  ): MeshLambertBuilderMatNode;
  node(
    path: "/rhino/MAT/meshPhysicalBuilder_INSTANCES"
  ): MeshPhysicalBuilderMatNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_scene_02 {
  "polarTransform1--center"?: ParamValueSerializedTypeMap["vector3"];
  "polarTransform1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "polarTransform1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "polarTransform1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "polarTransform1--centerx"?: ParamValueSerializedTypeMap["float"];
  "polarTransform1--centery"?: ParamValueSerializedTypeMap["float"];
  "polarTransform1--centerz"?: ParamValueSerializedTypeMap["float"];
  "polarTransform1--longitude"?: ParamValueSerializedTypeMap["float"];
  "polarTransform1--latitude"?: ParamValueSerializedTypeMap["float"];
  "polarTransform1--depth"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--transform"?: ParamValueSerializedTypeMap["folder"];
  "pointLight1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "pointLight1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "pointLight1--t"?: ParamValueSerializedTypeMap["vector3"];
  "pointLight1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--tx"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--ty"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--tz"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--r"?: ParamValueSerializedTypeMap["vector3"];
  "pointLight1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--rx"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--ry"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--rz"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--s"?: ParamValueSerializedTypeMap["vector3"];
  "pointLight1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--sx"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--sy"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--sz"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--scale"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "pointLight1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "pointLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "pointLight1--color"?: ParamValueSerializedTypeMap["color"];
  "pointLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--decay"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--distance"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "pointLight1--helperSize"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--name"?: ParamValueSerializedTypeMap["string"];
  "pointLight1--shadow"?: ParamValueSerializedTypeMap["folder"];
  "pointLight1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "pointLight1--shadowAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "pointLight1--shadowUpdateOnNextRender"?: ParamValueSerializedTypeMap["boolean"];
  "pointLight1--shadowRes"?: ParamValueSerializedTypeMap["vector2"];
  "pointLight1--shadowRes-shadowResx"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--shadowRes-shadowResy"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--shadowResx"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--shadowResy"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--shadowBias"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--shadowNear"?: ParamValueSerializedTypeMap["float"];
  "pointLight1--shadowFar"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColor"?: ParamValueSerializedTypeMap["color"];
  "hemisphereLight1--skyColor-skyColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColor-skyColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColor-skyColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor"?: ParamValueSerializedTypeMap["color"];
  "hemisphereLight1--groundColor-groundColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor-groundColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor-groundColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position"?: ParamValueSerializedTypeMap["vector3"];
  "hemisphereLight1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positionx"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positiony"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positionz"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--name"?: ParamValueSerializedTypeMap["string"];
  "perspectiveCamera1--transform"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--t"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--scale"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--camera"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--controls"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--updateFromControlsMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--near"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--far"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--display"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--fov"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--frameMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--expectedAspectRatio"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--layer"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--render"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--setScene"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--scene"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--renderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setCSSRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--CSSRenderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--doPostProcess"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--postProcessNode"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1-events1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--enableKeys"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysPanSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysRotateSpeedVertical"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysRotateSpeedHorizontal"?: ParamValueSerializedTypeMap["float"];
  "floor--transform"?: ParamValueSerializedTypeMap["folder"];
  "floor--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "floor--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "floor--t"?: ParamValueSerializedTypeMap["vector3"];
  "floor--t-tx"?: ParamValueSerializedTypeMap["float"];
  "floor--t-ty"?: ParamValueSerializedTypeMap["float"];
  "floor--t-tz"?: ParamValueSerializedTypeMap["float"];
  "floor--tx"?: ParamValueSerializedTypeMap["float"];
  "floor--ty"?: ParamValueSerializedTypeMap["float"];
  "floor--tz"?: ParamValueSerializedTypeMap["float"];
  "floor--r"?: ParamValueSerializedTypeMap["vector3"];
  "floor--r-rx"?: ParamValueSerializedTypeMap["float"];
  "floor--r-ry"?: ParamValueSerializedTypeMap["float"];
  "floor--r-rz"?: ParamValueSerializedTypeMap["float"];
  "floor--rx"?: ParamValueSerializedTypeMap["float"];
  "floor--ry"?: ParamValueSerializedTypeMap["float"];
  "floor--rz"?: ParamValueSerializedTypeMap["float"];
  "floor--s"?: ParamValueSerializedTypeMap["vector3"];
  "floor--s-sx"?: ParamValueSerializedTypeMap["float"];
  "floor--s-sy"?: ParamValueSerializedTypeMap["float"];
  "floor--s-sz"?: ParamValueSerializedTypeMap["float"];
  "floor--sx"?: ParamValueSerializedTypeMap["float"];
  "floor--sy"?: ParamValueSerializedTypeMap["float"];
  "floor--sz"?: ParamValueSerializedTypeMap["float"];
  "floor--scale"?: ParamValueSerializedTypeMap["float"];
  "floor--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "floor--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "floor--display"?: ParamValueSerializedTypeMap["boolean"];
  "floor--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "floor-circle1--radius"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--segments"?: ParamValueSerializedTypeMap["integer"];
  "floor-circle1--open"?: ParamValueSerializedTypeMap["boolean"];
  "floor-circle1--connectLastPoint"?: ParamValueSerializedTypeMap["boolean"];
  "floor-circle1--arcAngle"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--direction"?: ParamValueSerializedTypeMap["vector3"];
  "floor-circle1--direction-directionx"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--direction-directiony"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--direction-directionz"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--directionx"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--directiony"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--directionz"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--center"?: ParamValueSerializedTypeMap["vector3"];
  "floor-circle1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--centerx"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--centery"?: ParamValueSerializedTypeMap["float"];
  "floor-circle1--centerz"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--direction"?: ParamValueSerializedTypeMap["vector3"];
  "floor-reflector1--direction-directionx"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--direction-directiony"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--direction-directionz"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--directionx"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--directiony"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--directionz"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--directionOffset"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--active"?: ParamValueSerializedTypeMap["boolean"];
  "floor-reflector1--clipBias"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--color"?: ParamValueSerializedTypeMap["color"];
  "floor-reflector1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--colorr"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--colorg"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--colorb"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--useVertexColor"?: ParamValueSerializedTypeMap["boolean"];
  "floor-reflector1--reflectionBlend"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--opacity"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--pixelRatio"?: ParamValueSerializedTypeMap["integer"];
  "floor-reflector1--multisamples"?: ParamValueSerializedTypeMap["integer"];
  "floor-reflector1--tblur"?: ParamValueSerializedTypeMap["boolean"];
  "floor-reflector1--blur"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--verticalBlurMult"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--tblur2"?: ParamValueSerializedTypeMap["boolean"];
  "floor-reflector1--blur2"?: ParamValueSerializedTypeMap["float"];
  "floor-reflector1--verticalBlur2Mult"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--url"?: ParamValueSerializedTypeMap["string"];
  "COP-image1--reload"?: ParamValueSerializedTypeMap["button"];
  "COP-image1--tencoding"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--encoding"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tmapping"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--mapping"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--twrap"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--wrapS"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--wrapT"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tminFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--minFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tmagFilter"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--magFilter"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tanisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--useRendererMaxAnisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--anisotropy"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--tflipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--flipY"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--ttransform"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--offset"?: ParamValueSerializedTypeMap["vector2"];
  "COP-image1--offset-offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--offset-offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--offsetx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--offsety"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeat"?: ParamValueSerializedTypeMap["vector2"];
  "COP-image1--repeat-repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeat-repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeatx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--repeaty"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--rotation"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--center"?: ParamValueSerializedTypeMap["vector2"];
  "COP-image1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--centerx"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--centery"?: ParamValueSerializedTypeMap["float"];
  "COP-image1--tadvanced"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--tformat"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--format"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--ttype"?: ParamValueSerializedTypeMap["boolean"];
  "COP-image1--type"?: ParamValueSerializedTypeMap["integer"];
  "COP-image1--checkFileType"?: ParamValueSerializedTypeMap["boolean"];
  "COP-envMap1--useCameraRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "geo2--transform"?: ParamValueSerializedTypeMap["folder"];
  "geo2--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "geo2--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo2--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo2--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo2--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo2--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo2--tx"?: ParamValueSerializedTypeMap["float"];
  "geo2--ty"?: ParamValueSerializedTypeMap["float"];
  "geo2--tz"?: ParamValueSerializedTypeMap["float"];
  "geo2--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo2--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo2--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo2--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo2--rx"?: ParamValueSerializedTypeMap["float"];
  "geo2--ry"?: ParamValueSerializedTypeMap["float"];
  "geo2--rz"?: ParamValueSerializedTypeMap["float"];
  "geo2--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo2--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo2--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo2--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo2--sx"?: ParamValueSerializedTypeMap["float"];
  "geo2--sy"?: ParamValueSerializedTypeMap["float"];
  "geo2--sz"?: ParamValueSerializedTypeMap["float"];
  "geo2--scale"?: ParamValueSerializedTypeMap["float"];
  "geo2--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo2--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "geo2--display"?: ParamValueSerializedTypeMap["boolean"];
  "geo2--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo2-sphere1--type"?: ParamValueSerializedTypeMap["integer"];
  "geo2-sphere1--radius"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--resolution"?: ParamValueSerializedTypeMap["vector2"];
  "geo2-sphere1--resolution-resolutionx"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--resolution-resolutiony"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--resolutionx"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--resolutiony"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--open"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-sphere1--phiStart"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--phiLength"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--thetaStart"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--thetaLength"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--detail"?: ParamValueSerializedTypeMap["integer"];
  "geo2-sphere1--center"?: ParamValueSerializedTypeMap["vector3"];
  "geo2-sphere1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--centerx"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--centery"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--centerz"?: ParamValueSerializedTypeMap["float"];
  "geo2-sphere1--asLines"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-material1--group"?: ParamValueSerializedTypeMap["string"];
  "geo2-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "geo2-material1--applyToChildren"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "geo2-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "geo2-objectProperties1--applyToChildren"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--tname"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--name"?: ParamValueSerializedTypeMap["string"];
  "geo2-objectProperties1--trenderOrder"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo2-objectProperties1--tfrustumCulled"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--frustumCulled"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--tmatrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--tvisible"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--visible"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--tcastShadow"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--treceiveShadow"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-objectProperties1--receiveShadow"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--default"?: ParamValueSerializedTypeMap["folder"];
  "geo2-MAT-meshBasic1--color"?: ParamValueSerializedTypeMap["color"];
  "geo2-MAT-meshBasic1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--colorr"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--colorg"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--colorb"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--useVertexColors"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--opacity"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--textures"?: ParamValueSerializedTypeMap["folder"];
  "geo2-MAT-meshBasic1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--map"?: ParamValueSerializedTypeMap["node_path"];
  "geo2-MAT-meshBasic1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo2-MAT-meshBasic1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo2-MAT-meshBasic1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo2-MAT-meshBasic1--combine"?: ParamValueSerializedTypeMap["integer"];
  "geo2-MAT-meshBasic1--reflectivity"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--refractionRatio"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo2-MAT-meshBasic1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "geo2-MAT-meshBasic1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--front"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--blending"?: ParamValueSerializedTypeMap["integer"];
  "geo2-MAT-meshBasic1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "geo2-MAT-meshBasic1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "geo2-MAT-meshBasic1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo2-MAT-meshBasic1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "geo2-MAT-meshBasic1--wireframeLinecap"?: ParamValueSerializedTypeMap["integer"];
  "geo2-MAT-meshBasic1--wireframeLinejoin"?: ParamValueSerializedTypeMap["integer"];
  "geo2-MAT-meshBasic1--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "rhino--transform"?: ParamValueSerializedTypeMap["folder"];
  "rhino--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "rhino--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "rhino--t"?: ParamValueSerializedTypeMap["vector3"];
  "rhino--t-tx"?: ParamValueSerializedTypeMap["float"];
  "rhino--t-ty"?: ParamValueSerializedTypeMap["float"];
  "rhino--t-tz"?: ParamValueSerializedTypeMap["float"];
  "rhino--tx"?: ParamValueSerializedTypeMap["float"];
  "rhino--ty"?: ParamValueSerializedTypeMap["float"];
  "rhino--tz"?: ParamValueSerializedTypeMap["float"];
  "rhino--r"?: ParamValueSerializedTypeMap["vector3"];
  "rhino--r-rx"?: ParamValueSerializedTypeMap["float"];
  "rhino--r-ry"?: ParamValueSerializedTypeMap["float"];
  "rhino--r-rz"?: ParamValueSerializedTypeMap["float"];
  "rhino--rx"?: ParamValueSerializedTypeMap["float"];
  "rhino--ry"?: ParamValueSerializedTypeMap["float"];
  "rhino--rz"?: ParamValueSerializedTypeMap["float"];
  "rhino--s"?: ParamValueSerializedTypeMap["vector3"];
  "rhino--s-sx"?: ParamValueSerializedTypeMap["float"];
  "rhino--s-sy"?: ParamValueSerializedTypeMap["float"];
  "rhino--s-sz"?: ParamValueSerializedTypeMap["float"];
  "rhino--sx"?: ParamValueSerializedTypeMap["float"];
  "rhino--sy"?: ParamValueSerializedTypeMap["float"];
  "rhino--sz"?: ParamValueSerializedTypeMap["float"];
  "rhino--scale"?: ParamValueSerializedTypeMap["float"];
  "rhino--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "rhino--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "rhino--display"?: ParamValueSerializedTypeMap["boolean"];
  "rhino--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "rhino-material1--group"?: ParamValueSerializedTypeMap["string"];
  "rhino-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-material1--applyToChildren"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "rhino-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "rhino-fileGLTF1--url"?: ParamValueSerializedTypeMap["string"];
  "rhino-fileGLTF1--draco"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-fileGLTF1--ktx2"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-fileGLTF1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-fileGLTF1--reload"?: ParamValueSerializedTypeMap["button"];
  "rhino-hierarchy1--mode"?: ParamValueSerializedTypeMap["integer"];
  "rhino-hierarchy1--levels"?: ParamValueSerializedTypeMap["integer"];
  "rhino-hierarchy1--objectMask"?: ParamValueSerializedTypeMap["string"];
  "rhino-hierarchy1--addChildMode"?: ParamValueSerializedTypeMap["integer"];
  "rhino-scatter1--pointsCount"?: ParamValueSerializedTypeMap["integer"];
  "rhino-scatter1--seed"?: ParamValueSerializedTypeMap["integer"];
  "rhino-scatter1--useWeightAttribute"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-scatter1--weightAttribute"?: ParamValueSerializedTypeMap["string"];
  "rhino-scatter1--transferAttributes"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-scatter1--attributesToTransfer"?: ParamValueSerializedTypeMap["string"];
  "rhino-scatter1--addIdAttribute"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-scatter1--addIdnAttribute"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-point1--updateX"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-point1--x"?: ParamValueSerializedTypeMap["float"];
  "rhino-point1--updateY"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-point1--y"?: ParamValueSerializedTypeMap["float"];
  "rhino-point1--updateZ"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-point1--z"?: ParamValueSerializedTypeMap["float"];
  "rhino-point1--updateNormals"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-point1--m"?: ParamValueSerializedTypeMap["float"];
  "rhino-fuse1--dist"?: ParamValueSerializedTypeMap["float"];
  "rhino-instance1--attributesToCopy"?: ParamValueSerializedTypeMap["string"];
  "rhino-instance1--applyMaterial"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-instance1--material"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-attribDelete1--class"?: ParamValueSerializedTypeMap["integer"];
  "rhino-attribDelete1--name"?: ParamValueSerializedTypeMap["string"];
  "rhino-roundedBox1--size"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--sizes"?: ParamValueSerializedTypeMap["vector3"];
  "rhino-roundedBox1--sizes-sizesx"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--sizes-sizesy"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--sizes-sizesz"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--sizesx"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--sizesy"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--sizesz"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--divisions"?: ParamValueSerializedTypeMap["integer"];
  "rhino-roundedBox1--bevel"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--center"?: ParamValueSerializedTypeMap["vector3"];
  "rhino-roundedBox1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--centerx"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--centery"?: ParamValueSerializedTypeMap["float"];
  "rhino-roundedBox1--centerz"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "rhino-transform1--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "rhino-transform1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "rhino-transform1--group"?: ParamValueSerializedTypeMap["string"];
  "rhino-transform1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "rhino-transform1--t"?: ParamValueSerializedTypeMap["vector3"];
  "rhino-transform1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--tx"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--ty"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--tz"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--r"?: ParamValueSerializedTypeMap["vector3"];
  "rhino-transform1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--rx"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--ry"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--rz"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--s"?: ParamValueSerializedTypeMap["vector3"];
  "rhino-transform1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--sx"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--sy"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--sz"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--scale"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "rhino-transform1--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--pivotx"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--pivoty"?: ParamValueSerializedTypeMap["float"];
  "rhino-transform1--pivotz"?: ParamValueSerializedTypeMap["float"];
  "rhino-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshPhysicalBuilder1--default"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshPhysicalBuilder1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--opacity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--textures"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshPhysicalBuilder1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--map"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--emissive"?: ParamValueSerializedTypeMap["color"];
  "rhino-MAT-meshPhysicalBuilder1--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--emissiver"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshPhysicalBuilder1--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "rhino-MAT-meshPhysicalBuilder1--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--metalness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--roughness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoat"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useClearCoatMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoatMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--useClearCoatNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoatNormalMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoatNormalScale"?: ParamValueSerializedTypeMap["vector2"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoatNormalScale-clearcoatNormalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoatNormalScale-clearcoatNormalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoatNormalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoatNormalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoatRoughness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useClearCoatRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--clearcoatRoughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--useSheen"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--sheen"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--sheenRoughness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--sheenColor"?: ParamValueSerializedTypeMap["color"];
  "rhino-MAT-meshPhysicalBuilder1--sheenColor-sheenColorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--sheenColor-sheenColorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--sheenColor-sheenColorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--sheenColorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--sheenColorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--sheenColorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--transmission"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useTransmissionMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--transmissionMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--ior"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--thickness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useThicknessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--thicknessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--attenuationDistance"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--attenuationColor"?: ParamValueSerializedTypeMap["color"];
  "rhino-MAT-meshPhysicalBuilder1--attenuationColor-attenuationColorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--attenuationColor-attenuationColorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--attenuationColor-attenuationColorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--attenuationColorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--attenuationColorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--attenuationColorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshPhysicalBuilder1--setBuilderNode"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--builderNode"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--front"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--blending"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshPhysicalBuilder1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshPhysicalBuilder1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshPhysicalBuilder1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--shadowPCSS"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--shadowPCSSFilterSize"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder1--overrideCustomMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--createCustomMatDistance"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--createCustomMatDepth"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder1--createCustomMatDepthDOF"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--default"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--opacity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--textures"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--map"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--emissive"?: ParamValueSerializedTypeMap["color"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--emissiver"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--combine"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--reflectivity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--refractionRatio"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--advanced"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--setBuilderNode"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--builderNode"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--front"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--blending"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--shadowPCSS"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshLambertBuilder_INSTANCES--shadowPCSSFilterSize"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--default"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--opacity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--textures"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--map"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--emissive"?: ParamValueSerializedTypeMap["color"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--emissiver"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--metalness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--roughness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoat"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useClearCoatMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoatMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useClearCoatNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoatNormalMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoatNormalScale"?: ParamValueSerializedTypeMap["vector2"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoatNormalScale-clearcoatNormalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoatNormalScale-clearcoatNormalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoatNormalScalex"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoatNormalScaley"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoatRoughness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useClearCoatRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--clearcoatRoughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useSheen"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--sheen"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--sheenRoughness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--sheenColor"?: ParamValueSerializedTypeMap["color"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--sheenColor-sheenColorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--sheenColor-sheenColorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--sheenColor-sheenColorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--sheenColorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--sheenColorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--sheenColorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--transmission"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useTransmissionMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--transmissionMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--ior"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--thickness"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useThicknessMap"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--thicknessMap"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--attenuationDistance"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--attenuationColor"?: ParamValueSerializedTypeMap["color"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--attenuationColor-attenuationColorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--attenuationColor-attenuationColorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--attenuationColor-attenuationColorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--attenuationColorr"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--attenuationColorg"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--attenuationColorb"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--advanced"?: ParamValueSerializedTypeMap["folder"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--setBuilderNode"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--builderNode"?: ParamValueSerializedTypeMap["node_path"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--front"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--blending"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--shadowPCSS"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--shadowPCSSFilterSize"?: ParamValueSerializedTypeMap["float"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--overrideCustomMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--createCustomMatDistance"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--createCustomMatDepth"?: ParamValueSerializedTypeMap["boolean"];
  "rhino-MAT-meshPhysicalBuilder_INSTANCES--createCustomMatDepthDOF"?: ParamValueSerializedTypeMap["boolean"];
}
