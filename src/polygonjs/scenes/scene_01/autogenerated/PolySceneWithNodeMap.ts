import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
import { HemisphereLightObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/HemisphereLight";
import { PerspectiveCameraObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/PerspectiveCamera";
import { SpotLightObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/SpotLight";
// sop
import { CircleSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Circle";
import { CopNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/CopNetwork";
import { CopySopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Copy";
import { EventsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/EventsNetwork";
import { MaterialSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Material";
import { MaterialsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/MaterialsNetwork";
import { OceanPlaneSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/OceanPlane";
import { PlaneSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Plane";
import { TransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Transform";
// cop
import { ImageCopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/cop/Image";
// mat
import { MeshStandardMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandard";
// event
import { CameraOrbitControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/CameraOrbitControls";

export class PolySceneWithNodeMap_scene_01 extends PolyScene {
  node(path: "/hemisphereLight1"): HemisphereLightObjNode;
  node(path: "/spotLight1"): SpotLightObjNode;
  node(path: "/geo1"): GeoObjNode;
  node(path: "/geo1/copy1"): CopySopNode;
  node(path: "/geo1/plane1"): PlaneSopNode;
  node(path: "/geo1/material1"): MaterialSopNode;
  node(path: "/geo1/transform1"): TransformSopNode;
  node(path: "/geo1/transform2"): TransformSopNode;
  node(path: "/geo1/COP"): CopNetworkSopNode;
  node(path: "/geo1/COP/image_VUE"): ImageCopNode;
  node(path: "/geo1/MAT"): MaterialsNetworkSopNode;
  node(path: "/geo1/MAT/meshStandard1"): MeshStandardMatNode;
  node(path: "/perspectiveCamera1"): PerspectiveCameraObjNode;
  node(path: "/perspectiveCamera1/events1"): EventsNetworkSopNode;
  node(
    path: "/perspectiveCamera1/events1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/ocean"): GeoObjNode;
  node(path: "/ocean/circle1"): CircleSopNode;
  node(path: "/ocean/oceanPlane1"): OceanPlaneSopNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_scene_01 {
  "hemisphereLight1--skyColor"?: ParamValueSerializedTypeMap["color"];
  "hemisphereLight1--skyColor-skyColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColor-skyColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColor-skyColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor"?: ParamValueSerializedTypeMap["color"];
  "hemisphereLight1--groundColor-groundColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor-groundColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor-groundColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position"?: ParamValueSerializedTypeMap["vector3"];
  "hemisphereLight1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positionx"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positiony"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positionz"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--name"?: ParamValueSerializedTypeMap["string"];
  "spotLight1--transform"?: ParamValueSerializedTypeMap["folder"];
  "spotLight1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "spotLight1--t"?: ParamValueSerializedTypeMap["vector3"];
  "spotLight1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--tx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--ty"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--tz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--r"?: ParamValueSerializedTypeMap["vector3"];
  "spotLight1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--rx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--ry"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--rz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--s"?: ParamValueSerializedTypeMap["vector3"];
  "spotLight1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--sx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--sy"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--sz"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--scale"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "spotLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "spotLight1--color"?: ParamValueSerializedTypeMap["color"];
  "spotLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--angle"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--penumbra"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--decay"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--distance"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--helperSize"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--name"?: ParamValueSerializedTypeMap["string"];
  "spotLight1--shadow"?: ParamValueSerializedTypeMap["folder"];
  "spotLight1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--shadowAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--shadowUpdateOnNextRender"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--shadowRes"?: ParamValueSerializedTypeMap["vector2"];
  "spotLight1--shadowRes-shadowResx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowRes-shadowResy"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowResx"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowResy"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowBias"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowNear"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowFar"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--shadowRadius"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--volumetric"?: ParamValueSerializedTypeMap["folder"];
  "spotLight1--tvolumetric"?: ParamValueSerializedTypeMap["boolean"];
  "spotLight1--volAttenuation"?: ParamValueSerializedTypeMap["float"];
  "spotLight1--volAnglePower"?: ParamValueSerializedTypeMap["float"];
  "geo1--transform"?: ParamValueSerializedTypeMap["folder"];
  "geo1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "geo1--display"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-copy1--count"?: ParamValueSerializedTypeMap["integer"];
  "geo1-copy1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-copy1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-copy1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-copy1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-copy1--transformOnly"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-copy1--transformMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-copy1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-copy1--copyAttributes"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-copy1--attributesToCopy"?: ParamValueSerializedTypeMap["string"];
  "geo1-copy1--useCopyExpr"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-plane1--size"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-plane1--size-sizex"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--size-sizey"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--sizex"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--sizey"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--useSegmentsCount"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-plane1--stepSize"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--segments"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-plane1--segments-segmentsx"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--segments-segmentsy"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--segmentsx"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--segmentsy"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--direction"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-plane1--direction-directionx"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--direction-directiony"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--direction-directionz"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--directionx"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--directiony"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--directionz"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--center"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-plane1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--centerx"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--centery"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--centerz"?: ParamValueSerializedTypeMap["float"];
  "geo1-plane1--asLines"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-material1--applyToChildren"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "geo1-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform2--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform2--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform2--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform2--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform2--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform2--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform2--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform2--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform2--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform2--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--url"?: ParamValueSerializedTypeMap["string"];
  "geo1-COP-image_VUE--reload"?: ParamValueSerializedTypeMap["button"];
  "geo1-COP-image_VUE--tencoding"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--encoding"?: ParamValueSerializedTypeMap["integer"];
  "geo1-COP-image_VUE--tmapping"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--mapping"?: ParamValueSerializedTypeMap["integer"];
  "geo1-COP-image_VUE--twrap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--wrapS"?: ParamValueSerializedTypeMap["integer"];
  "geo1-COP-image_VUE--wrapT"?: ParamValueSerializedTypeMap["integer"];
  "geo1-COP-image_VUE--tminFilter"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--minFilter"?: ParamValueSerializedTypeMap["integer"];
  "geo1-COP-image_VUE--tmagFilter"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--magFilter"?: ParamValueSerializedTypeMap["integer"];
  "geo1-COP-image_VUE--tanisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--useRendererMaxAnisotropy"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--anisotropy"?: ParamValueSerializedTypeMap["integer"];
  "geo1-COP-image_VUE--tflipY"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--flipY"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--ttransform"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--offset"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-COP-image_VUE--offset-offsetx"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--offset-offsety"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--offsetx"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--offsety"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--repeat"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-COP-image_VUE--repeat-repeatx"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--repeat-repeaty"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--repeatx"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--repeaty"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--rotation"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--center"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-COP-image_VUE--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--center-centery"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--centerx"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--centery"?: ParamValueSerializedTypeMap["float"];
  "geo1-COP-image_VUE--tadvanced"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--tformat"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--format"?: ParamValueSerializedTypeMap["integer"];
  "geo1-COP-image_VUE--ttype"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-COP-image_VUE--type"?: ParamValueSerializedTypeMap["integer"];
  "geo1-COP-image_VUE--checkFileType"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--default"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandard1--color"?: ParamValueSerializedTypeMap["color"];
  "geo1-MAT-meshStandard1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--colorr"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--colorg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--colorb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useVertexColors"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--opacity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--textures"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandard1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--map"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissive"?: ParamValueSerializedTypeMap["color"];
  "geo1-MAT-meshStandard1--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissiver"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-MAT-meshStandard1--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--metalness"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandard1--roughness"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandard1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--front"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--blending"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandard1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandard1--wireframeLinecap"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--wireframeLinejoin"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandard1--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--transform"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--t"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--scale"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--camera"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--controls"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--updateFromControlsMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--near"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--far"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--display"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--fov"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--frameMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--expectedAspectRatio"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--layer"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--render"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--setScene"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--scene"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--renderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setCSSRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--CSSRenderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--doPostProcess"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--postProcessNode"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1-events1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--enableKeys"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysPanSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysRotateSpeedVertical"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysRotateSpeedHorizontal"?: ParamValueSerializedTypeMap["float"];
  "ocean--transform"?: ParamValueSerializedTypeMap["folder"];
  "ocean--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "ocean--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "ocean--t"?: ParamValueSerializedTypeMap["vector3"];
  "ocean--t-tx"?: ParamValueSerializedTypeMap["float"];
  "ocean--t-ty"?: ParamValueSerializedTypeMap["float"];
  "ocean--t-tz"?: ParamValueSerializedTypeMap["float"];
  "ocean--tx"?: ParamValueSerializedTypeMap["float"];
  "ocean--ty"?: ParamValueSerializedTypeMap["float"];
  "ocean--tz"?: ParamValueSerializedTypeMap["float"];
  "ocean--r"?: ParamValueSerializedTypeMap["vector3"];
  "ocean--r-rx"?: ParamValueSerializedTypeMap["float"];
  "ocean--r-ry"?: ParamValueSerializedTypeMap["float"];
  "ocean--r-rz"?: ParamValueSerializedTypeMap["float"];
  "ocean--rx"?: ParamValueSerializedTypeMap["float"];
  "ocean--ry"?: ParamValueSerializedTypeMap["float"];
  "ocean--rz"?: ParamValueSerializedTypeMap["float"];
  "ocean--s"?: ParamValueSerializedTypeMap["vector3"];
  "ocean--s-sx"?: ParamValueSerializedTypeMap["float"];
  "ocean--s-sy"?: ParamValueSerializedTypeMap["float"];
  "ocean--s-sz"?: ParamValueSerializedTypeMap["float"];
  "ocean--sx"?: ParamValueSerializedTypeMap["float"];
  "ocean--sy"?: ParamValueSerializedTypeMap["float"];
  "ocean--sz"?: ParamValueSerializedTypeMap["float"];
  "ocean--scale"?: ParamValueSerializedTypeMap["float"];
  "ocean--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "ocean--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "ocean--display"?: ParamValueSerializedTypeMap["boolean"];
  "ocean--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "ocean-circle1--radius"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--segments"?: ParamValueSerializedTypeMap["integer"];
  "ocean-circle1--open"?: ParamValueSerializedTypeMap["boolean"];
  "ocean-circle1--connectLastPoint"?: ParamValueSerializedTypeMap["boolean"];
  "ocean-circle1--arcAngle"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--direction"?: ParamValueSerializedTypeMap["vector3"];
  "ocean-circle1--direction-directionx"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--direction-directiony"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--direction-directionz"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--directionx"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--directiony"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--directionz"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--center"?: ParamValueSerializedTypeMap["vector3"];
  "ocean-circle1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--centerx"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--centery"?: ParamValueSerializedTypeMap["float"];
  "ocean-circle1--centerz"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--main"?: ParamValueSerializedTypeMap["folder"];
  "ocean-oceanPlane1--direction"?: ParamValueSerializedTypeMap["vector3"];
  "ocean-oceanPlane1--direction-directionx"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--direction-directiony"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--direction-directionz"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--directionx"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--directiony"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--directionz"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunDirection"?: ParamValueSerializedTypeMap["vector3"];
  "ocean-oceanPlane1--sunDirection-sunDirectionx"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunDirection-sunDirectiony"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunDirection-sunDirectionz"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunDirectionx"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunDirectiony"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunDirectionz"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunColor"?: ParamValueSerializedTypeMap["color"];
  "ocean-oceanPlane1--sunColor-sunColorr"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunColor-sunColorg"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunColor-sunColorb"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunColorr"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunColorg"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--sunColorb"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--waterColor"?: ParamValueSerializedTypeMap["color"];
  "ocean-oceanPlane1--waterColor-waterColorr"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--waterColor-waterColorg"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--waterColor-waterColorb"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--waterColorr"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--waterColorg"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--waterColorb"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--reflectionColor"?: ParamValueSerializedTypeMap["color"];
  "ocean-oceanPlane1--reflectionColor-reflectionColorr"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--reflectionColor-reflectionColorg"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--reflectionColor-reflectionColorb"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--reflectionColorr"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--reflectionColorg"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--reflectionColorb"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--reflectionFresnel"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--wavesHeight"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--distortionScale"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--timeScale"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--size"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "ocean-oceanPlane1--renderReflection"?: ParamValueSerializedTypeMap["boolean"];
  "ocean-oceanPlane1--normalBias"?: ParamValueSerializedTypeMap["float"];
  "ocean-oceanPlane1--multisamples"?: ParamValueSerializedTypeMap["integer"];
  "ocean-oceanPlane1--useFog"?: ParamValueSerializedTypeMap["boolean"];
}
